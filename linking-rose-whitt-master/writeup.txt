COMP 321 Project 3: Linking
Rose Whitt, rew9 and Madison Roy, mmr11

---(Do not write lines of text that exceed the width of this line.)------------

PROBLEM 7.6
Symbol		swap.o .symtab entry?		Symbol type	Module 	Section
buf		yes				extern		m.o	.data
bufp0		yes				global		swap.o	.data
bufp1		yes				local		swap.o	.bss
swap		yes				global		swap.o	.text
temp		no				--		--	--
incr		yes				local		swap.o	.text
count		yes				local		swap.o	.bss

PROBLEM 7.9
Since the execution of the program involves two objects named main, the 
strong implementation in foo6.c overrides the weak definition in bar6.c. The
address printed is associated with the function main, not the char, explaining
why it printed a result when main had not yet been initialized.

PROBLEM 7.12
A. The value of the relocated reference to swap in the callq instruction is 
0a000000. 
ADDR(s) = ADDR(.text) = 0x4004e0
and
ADDR(r.symbol) = ADDR(swap) = 0x4004fa
refaddr = ADDR(s) + r.offset
	= 0x4004e0 + 0xa
	= 0x4004ea
*refptr = (unsigned) (ADDR(r.symbol) + r.addend - refaddr)
	= (unsigned) (0x4004fa + (-4) - 0x4004ea)
	= (unsigned) (0xa)
	= 0a000000
					
B. The value of the relocated reference to swap in the callq instruction is
22000000.
ADDR(s) = 0x4004d0
and
ADDR(r.symbol) = ADDR(swap) = 0x400500
refaddr = ADDR(s) + r.offset
	= 0x4004d0 + 0xa
	= 0x4004da
*refptr = (unsigned) (ADDR(r.symbol) +r.addend - refaddr)
	= (unsigned) (0x400500 + (-4) - 0x4004da)
	= 22000000
	
DESIGN DESCRIPTION

To print the JCF constants, we first verified that the index and tag were valid
and expected. We then addressed each constant, using a recursive approach, with
the base case being to print the JCF constant UTF8 data. To process the JCF 
header, we read the header from the JCF file, performed byteswapping, and then 
verified the magic number. To process the JCF constant pool, we read the size 
of the constant pool count, and then performed byteswapping. Then, we allocated
the appropriate amount of memory to the constant pool and iterated over each 
element to check for failure. We then processed each tag depending on the type
of constant. Finally, we printed the dependencies if necessary. To destroy the 
JCF constant pool, we iterated over the elements in the pool and freed the 
memory they each occupied. We then freed the pool itself. To process the JCF 
body, we read the access flags, class, and super test. To process the JCF 
interfaces, we read the interfaces count and then iterated over interfaces 
themselves to read them. To process the JCF attributes, we took a similar 
approach as with the interfaces. However, in our iteration, we read the 
attribute name index, length, and data.


TESTING STRATEGY

How you tested your code:
We tested our code using Java files from COMP 215 assignments that we 
converted to Java Class Files. We first ran the given reference solution 
on each of these inputs, and then ran our own solution to determine if they
yielded the same output.

How you selected your inputs:
We selected our inputs by considering every case that the code would need to
accommodate. This included both cases that we expected our program to correctly
read and print, as well as cases where the expected output was failure.

What those inputs were:
All correctly formatted COMP 215 .class files
A .class file with an invalid index (zero or greater than count)
A .class file with a different tag than index
A .class file with a header than cannot be read
A .class file with an invalid magic number
A .class file with an invalid constant_pool_count
A .class file with at least one incorrectly sized constant tag
A .class file with a body that cannot be read
A .class file with an interface count that cannot be read
A .class file with interfaces that cannot be read
A .class file with an attribute count that cannot be read
A .class file with an attribute name index that cannot be read
A .class file with an attribute length that cannot be read
A .class file with attribute data that cannot be read
An empty .class file
All of the above variations with -d, -e, no tags, and -d -e.

Why you believe those inputs were sufficient to test your code:
We believe that these inputs were sufficient in testing our code because they
cover every possible case of failure and success in the program, by using both
incorrectly and correctly formatted files and variations of command line 
arguments.

